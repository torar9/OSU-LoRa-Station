// Hello LoRa - ABP TTN Packet Sender (Multi-Channel)
// Tutorial Link: https://learn.adafruit.com/the-things-network-for-feather/using-a-feather-32u4
//
// Adafruit invests time and resources providing this open source code.
// Please support Adafruit and open source hardware by purchasing
// products from Adafruit!
//
// Copyright 2015, 2016 Ideetron B.V.
//
// Modified by Brent Rubell for Adafruit Industries, 2018
/************************** Configuration ***********************************/
#include <TinyLoRa.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_I2CDevice.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>
#include <sps30.h>

#define SEALEVELPRESSURE_HPA (1013.25)

// Visit your thethingsnetwork.org device console
// to create an account, or if you need your session keys.

// Network Session Key (MSB)
uint8_t NwkSkey[16] = {0xD1, 0xD1, 0x1D, 0x51, 0x34, 0x68, 0xFD, 0x5A, 0x3D, 0x67, 0x2D, 0xB5, 0x8B, 0x54, 0x8E, 0xD1};

// Application Session Key (MSB)
uint8_t AppSkey[16] = {0x94, 0x8D, 0x58, 0x25, 0xD0, 0x70, 0x33, 0xF1, 0xAF, 0xC4, 0x0D, 0x64, 0xE5, 0x97, 0x34, 0x6B};

// Device Address (MSB)
uint8_t DevAddr[4] = {0x26, 0x0B, 0xE6, 0x3A};

/************************** Example Begins Here ***********************************/
// Data Packet to Send to TTN
unsigned char loraData[11] = {"rello LoRa"};

// How many times data transfer should occur, in seconds
const unsigned int sendInterval = 30;

// Pinout for Adafruit Feather 32u4 LoRa
TinyLoRa lora = TinyLoRa(7, 8, 4);

// Pinout for Adafruit Feather M0 LoRa
// TinyLoRa lora = TinyLoRa(3, 8, 4);

Adafruit_BME680 bme;

void setup()
{
    delay(2000);
    Serial.begin(9600);
    while (!Serial)
        ;

    if (!bme.begin())
    {
        Serial.println("Failed to init bme680");
    }
    else
    {
        bme.setTemperatureOversampling(BME680_OS_8X);
        bme.setHumidityOversampling(BME680_OS_2X);
        bme.setPressureOversampling(BME680_OS_4X);
        bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
    }

    sensirion_i2c_init();
    if (sps30_probe() != 0)
    {
    }
    else
    {
        sps30_reset();
        sps30_stop_measurement();
    }

    // Initialize LoRa
    Serial.print("Starting LoRa...");
    // define multi-channel sending
    lora.setChannel(MULTI);
    // set datarate
    lora.setDatarate(SF7BW125);
    if (!lora.begin())
    {
        Serial.println("Failed");
        Serial.println("Check your radio");
        while (true)
            ;
    }

    // Optional set transmit power. If not set default is +17 dBm.
    // Valid options are: -80, 1 to 17, 20 (dBm).
    // For safe operation in 20dBm: your antenna must be 3:1 VWSR or better
    // and respect the 1% duty cycle.

    // lora.setPower(17);

    Serial.println("OK");
}

void loop()
{
    struct sps30_measurement m;
    uint16_t data_ready;
    int16_t ret;

    sps30_start_measurement();

    do
    {
        ret = sps30_read_data_ready(&data_ready);
        if (ret < 0)
        {
            Serial.print(F("error reading data-ready flag: "));
            Serial.println(ret);
        }
        if (data_ready)
            break;
        delay(100);
    } while (1);

    ret = sps30_read_measurement(&m);

    Serial.print(F("PM  1.0: "));
    Serial.println(m.mc_1p0);
    Serial.print(F("PM  2.5: "));
    Serial.println(m.mc_2p5);
    Serial.print(F("PM  4.0: "));
    Serial.println(m.mc_4p0);
    Serial.print(F("PM 10.0: "));
    Serial.println(m.mc_10p0);

    sps30_stop_measurement();

    unsigned long endTime = bme.beginReading();
    if (endTime == 0)
    {
        Serial.println(F("Failed to begin reading :("));
        return;
    }
    Serial.print(F("Reading started at "));
    Serial.print(millis());
    Serial.print(F(" and will finish at "));
    Serial.println(endTime);

    Serial.println(F("You can do other work during BME680 measurement."));
    delay(50); // This represents parallel work.
    // There's no need to delay() until millis() >= endTime: bme.endReading()
    // takes care of that. It's okay for parallel work to take longer than
    // BME680's measurement time.

    // Obtain measurement results from BME680. Note that this operation isn't
    // instantaneous even if milli() >= endTime due to I2C/SPI latency.
    if (!bme.endReading())
    {
        Serial.println(F("Failed to complete reading :("));
        return;
    }
    Serial.print(F("Reading completed at "));
    Serial.println(millis());

    Serial.print(F("Temperature = "));
    Serial.print(bme.temperature);
    Serial.println(F(" *C"));

    Serial.print(F("Pressure = "));
    Serial.print(bme.pressure / 100.0);
    Serial.println(F(" hPa"));

    Serial.print(F("Humidity = "));
    Serial.print(bme.humidity);
    Serial.println(F(" %"));

    Serial.print(F("Approx. Altitude = "));
    Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
    Serial.println(F(" m"));

    Serial.println("Sending LoRa Data...");
    lora.sendData(loraData, sizeof(loraData), lora.frameCounter);
    // Optionally set the Frame Port (1 to 255)
    // uint8_t framePort = 1;
    // lora.sendData(loraData, sizeof(loraData), lora.frameCounter, framePort);
    Serial.print("Frame Counter: ");
    Serial.println(lora.frameCounter);
    lora.frameCounter++;

    // blink LED to indicate packet sent
    digitalWrite(LED_BUILTIN, HIGH);
    delay(1000);
    digitalWrite(LED_BUILTIN, LOW);

    Serial.println("delaying...");
    delay(sendInterval * 1000);
}